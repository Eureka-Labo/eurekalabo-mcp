name: Eureka Tasks CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  EUREKA_API_URL: ${{ secrets.EUREKA_API_URL }}
  EUREKA_API_KEY: ${{ secrets.EUREKA_API_KEY }}

jobs:
  # Update task status from PR
  update-task-status:
    name: Update Eureka Task Status
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Extract task IDs from PR
        id: extract-tasks
        run: |
          # Extract task IDs from PR description or branch name
          PR_BODY="${{ github.event.pull_request.body }}"
          TASK_IDS=$(echo "$PR_BODY" | grep -oP 'Task ID: \K[a-z0-9]+' || echo "")
          echo "task_ids=$TASK_IDS" >> $GITHUB_OUTPUT

      - name: Update task status
        if: steps.extract-tasks.outputs.task_ids != ''
        run: |
          # Update task status via API
          for TASK_ID in ${{ steps.extract-tasks.outputs.task_ids }}; do
            curl -X PATCH "$EUREKA_API_URL/api/v1/tasks/$TASK_ID" \
              -H "Authorization: Bearer $EUREKA_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{"status":"in_review"}'
          done

  # Run tests and update task with results
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        id: tests
        run: npm test
        continue-on-error: true

      - name: Update task with test results
        if: github.event_name == 'pull_request'
        run: |
          # Add test results as task comment
          TEST_STATUS="${{ steps.tests.outcome }}"
          COMMENT="ðŸ¤– CI Test Results: $TEST_STATUS\n\nBranch: ${{ github.head_ref }}\nCommit: ${{ github.sha }}"

          # Extract task IDs and add comments
          # (Implementation would parse PR body for task IDs and post comments)
          echo "Test status: $TEST_STATUS"

  # Build and deploy
  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

  # Notify task completion on merge
  notify-completion:
    name: Notify Task Completion
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract merged PR tasks
        id: extract-pr-tasks
        run: |
          # Get commit message and extract task IDs
          COMMIT_MSG=$(git log -1 --pretty=%B)
          TASK_IDS=$(echo "$COMMIT_MSG" | grep -oP 'Task ID: \K[a-z0-9]+' || echo "")
          echo "task_ids=$TASK_IDS" >> $GITHUB_OUTPUT

      - name: Mark tasks as merged
        if: steps.extract-pr-tasks.outputs.task_ids != ''
        run: |
          for TASK_ID in ${{ steps.extract-pr-tasks.outputs.task_ids }}; do
            curl -X POST "$EUREKA_API_URL/api/v1/tasks/$TASK_ID/comments" \
              -H "Authorization: Bearer $EUREKA_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "content": "âœ… PR merged to main branch\n\nCommit: ${{ github.sha }}\nWorkflow: ${{ github.run_id }}"
              }'
          done

      - name: Notify team
        run: |
          echo "Tasks completed and merged to main!"
          # Add Slack/Discord notification here if needed

  # Code quality analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run type check
        run: npm run type-check || true

      - name: Post quality report
        run: |
          echo "Code quality analysis completed"
          # Post results as PR comment or task comment
